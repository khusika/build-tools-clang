#!/usr/bin/env bash
# shellcheck disable=SC1117
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2019 Nathan Chancellor
#                         Albert I (krasCGQ)
#                         Khusika Dhamar Gusti (khusika)
#
# Clang compilation script


###############
#             #
#  VARIABLES  #
#             #
###############

# Colors
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"

# Set current working directory
DIR=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

# Folder structure
# |__ build-clang
# |__ build
# |__ src
# |   |__ binutils
# |   |__ llvm-project
# |__ toolchains

SRC_FOLDER=${DIR}/src
BINUTILS_FOLDER=${SRC_FOLDER}/binutils
LLVM_FOLDER=${SRC_FOLDER}/llvm-project
BUILD_FOLDER=${DIR}/build
TC_FOLDER=${DIR}/toolchains

# Start tracking time
START=$(date +"%s")

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Help menu function
function help_menu() {
    echo
    echo "${BOLD}OVERVIEW:${RST} Build a Clang toolchain\n"
    echo "${BOLD}USAGE:${RST}    ./$(basename "${0}") <options>\n"
    echo "${BOLD}EXAMPLE:${RST}  ./$(basename "${0}") -a arm64\n"
    echo "${BOLD}REQUIRED PARAMETERS:${RST}"
    echo "  -a  | --arch:          Possible values: arm, arm64, powerpc, x86, ARM, and all. This is the toolchain's target architecture."
    echo "  -v  | --version:       Possible values: (7, 8, and 9). This is the Clang version to build."
    echo "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo "  -I  | --install-only:  Install only."
    echo "  -b  | --build-only:    Build only."
    echo "  -S  | --stock:         Compile official Clang (Without Nathan's patch)."
    echo "  -u  | --update-only:   Ability to only update repos."
    echo "  -p  | --package:       Possible values: gz or xz. Compresses toolchain after build."
    echo "  -T  | --test:          Build a test toolchain.\n"
}

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Remove URLs from Clang version
function clang_version() {
    [[ ${#} -lt 1 || ! ${1} =~ "clang" ]] && { display_error "You didn't supply a Clang binary!"; return; }
    [[ ! -f ${1} ]] && { display_error "Clang binary supplied doesn't exist!"; return; }

    "${1}" --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//' || display_error "Something went wrong!"
}

# Formats the time
function format_time() {
    local TIME_STRING
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    display_error "${@}"
    exit
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Add a remote if it doesn't exist
function add_remote() {
    if ! git remote | grep -q -m 1 "${1}"; then
        git remote add "${1}" "${2}"
    fi
}

function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # REQUIRED FLAGS
            "-a"|"--arch") shift && TARGET=${1} ;;
            "-v"|"--version") shift && VERSION=${1} ;;

            # OPTIONAL FLAGS
            "-b"|"--build-only")
                BUILD_ONLY=true ;;
            "-I"|"--install-only")
                INSTALL_ONLY=true ;;
            "-i"|"--install-folder")
                shift && enforce_value "${@}"
                INSTALL_FOLDER=${1} ;;
            "-S"|"--stock")
                STOCK=true ;;
            "-T"|"--test")
                TEST=true ;;
            "-u"|"--update-only")
                UPDATE_ONLY=true ;;
            "-p"|"--package") shift && COMPRESSION=${1} ;;

            # HELP!
            "-h"|"--help") help_menu; exit ;;

            *) die "Invalid parameter specified!" -h ;;
        esac

        shift
    done

    # Default values
    case "${TARGET}" in
        "arm") ARCH="ARM" ;;
        "arm64") ARCH="AArch64" ;;
        "i686") ARCH="X86" ;;
        "powerpc") ARCH="PowerPC" ;;
        "ARM") ARCH="ARM;AArch64" ;;
        "all") ARCH="PowerPC;X86;ARM;AArch64" ;;
        *) die "Absent or invalid arch specified!" -h ;;
    esac

    # Default values
    case "${VERSION}" in
        7|8|9) ;;
        *) die "Absent or invalid Clang version!" -h ;;
    esac

    # Folder that will hold the final compiled toolchain
    [[ -z ${INSTALL_FOLDER} ]] && INSTALL_FOLDER=${TC_FOLDER}/clang-${VERSION}.x${TEST:+"-test"}

    # Set compiler
    CC=$(command -v clang || command -v gcc)
    CXX=$(command -v clang++ || command -v g++)
    [[ -z ${CC} || -z ${CXX} ]] && die "Neither GCC nor Clang could be found on your system!"
}


# Syncs all necessary projects
function sync_all() {
    mkdir -p "${SRC_FOLDER}" || die "Error creating ${SRC_FOLDER}!"

    # Set branch based on version
    case ${VERSION} in
        "9") BRANCH=master ;;
        *) BRANCH="release/${VERSION}.x" ;;
    esac

    # Update LLVM repo
    LLVM_URL=https://github.com/llvm/llvm-project
    if [[ -d ${LLVM_FOLDER} ]]; then
        header "Updating LLVM"

        git -C "${LLVM_FOLDER}" reset --hard
        git -C "${LLVM_FOLDER}" checkout "${BRANCH}" || die "Error changing branches for LLVM!"
        git -C "${LLVM_FOLDER}" pull --rebase origin "${BRANCH}" || die "Error updating LLVM!"
    else
        header "Cloning LLVM"

        git -C "${SRC_FOLDER}" clone -b "${BRANCH}" ${LLVM_URL} || die "Error cloning LLVM!"
    fi
    GIT_REVISION=$(git -C "${LLVM_FOLDER}" show -s --format=%H origin/"${BRANCH}")
    [[ -z ${STOCK} && ${VERSION} -eq 7 ]] && { git -C "${LLVM_FOLDER}" apply -v -3 "${DIR}"/0001-add-LocalInit-sanitizer.patch || die "Applying local-init patch failed!"; }

    # Update binutils repo
    if [[ -d ${BINUTILS_FOLDER} ]]; then
        header "Updating binutils"

        git -C "${BINUTILS_FOLDER}" pull --rebase origin master || die "Error updating binutils"
    else
        header "Cloning binutils"

        git -C "${SRC_FOLDER}" clone --single-branch -b master git://sourceware.org/git/binutils-gdb.git binutils || die "Error cloning binutils"
    fi

    [[ -n ${UPDATE_ONLY} ]] && exit
}


# Removes any previous build files
function cleanup() {
    find "${DIR}" -type f -name "*.tar.*" -exec rm -f {} \;
    rm -rf "${BUILD_FOLDER}"
    mkdir -p "${BUILD_FOLDER}"
    cd "${BUILD_FOLDER}" || die "Error creating build folder!"
}


# Build the toolchain
function build() {
    header "Building Clang"

    cmake -Wno-dev \
          -G Ninja \
          -DCLANG_REPOSITORY_STRING="${LLVM_URL} ${GIT_REVISION}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER="${CC}" \
          -DCMAKE_C_FLAGS="-O2 -march=native -mtune=native" \
          -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_CXX_FLAGS="-O2 -march=native -mtune=native" \
          -DLINK_POLLY_INTO_TOOLS=ON \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER}" \
          -DLLVM_BINUTILS_INCDIR="${BINUTILS_FOLDER}/include" \
          -DLLVM_CCACHE_BUILD=ON \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;libcxx;libcxxabi;libunwind;lld;llvm;openmp;polly" \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_TARGETS_TO_BUILD="${ARCH}" \
          -DLLVM_USE_LINKER="$(for LD in lld gold bfd; do command -v ld.${LD} &>/dev/null && break; done; echo ${LD})" \
          "${LLVM_FOLDER}"/llvm || die "There was an error running cmake!"

    time ninja && SUCCESS=true
    TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
    if [[ -n ${SUCCESS} ]]; then
        VERSION_STRING=$(clang_version "${BUILD_FOLDER}"/bin/clang)
        header "SUCCESS!" "${GRN}"
        echo "${BOLD}Time elapsed:${RST} ${TIME_STRING,,}"
        echo
        echo "${BOLD}Version string:${RST} ${VERSION_STRING}"
        echo
    else
        header "ERROR BUILDING!"
        display_error "Time elapsed: ${TIME_STRING,,}"
        exit
    fi

    [[ -n ${BUILD_ONLY} ]] && exit
}

# Wrapper for syncing and building to minimize boilerplate if in
function sync_build() {
    if [[ -n ${INSTALL_ONLY} ]]; then
        cd "${BUILD_FOLDER}" || die "Build folder doesn't exist!"
        echo
        return
    fi
    sync_all
    cleanup
    build
}

# Install the toolchain
function install() {
    if [[ -z ${TEST} ]]; then
        rm -rf "${INSTALL_FOLDER}-old"
        mv "${INSTALL_FOLDER}" "${INSTALL_FOLDER}-old" 2>/dev/null
    fi
    if ! ninja install &>/dev/null; then
        header "ERROR INSTALLING!"
        exit
    fi

    echo "${BOLD}Installation location:${RST} ${INSTALL_FOLDER}"
    echo
}

# Package toolchain
function package_tc() {
    if [[ -n ${COMPRESSION} ]]; then
        TARGET_PACKAGE=clang-${VERSION}.0-${GIT_REVISION:0:12}.tar.${COMPRESSION}
        PACKAGE=clang-${VERSION}.x${TEST:+"-test"}

        header "PACKAGING TOOLCHAIN"

        echo "Target file: ${TARGET_PACKAGE}"

        case "${COMPRESSION}" in
            "gz") COMPRESSION_NAME=GZIP; COMPRESSION_PROGRAM=pigz ;;
            "xz") COMPRESSION_NAME=XZ; COMPRESSION_PROGRAM=pxz ;;
            *)
                die "Invalid compression specified... skipping" ;;
        esac
        export "${COMPRESSION,,}"_OPT=-9

        echo "Packaging with ${COMPRESSION_NAME}..."
        tar -c --use-compress-program=${COMPRESSION_PROGRAM} --absolute-names -f "${TARGET_PACKAGE}" -C "${TC_FOLDER}" "${PACKAGE}"
        find "${DIR}" -print0 -type f -name "${TARGET_PACKAGE}" | xargs --null mv -t "${TC_FOLDER}"
        echo "${BOLD}Packaging location:${RST} ${INSTALL_FOLDER}/${TARGET_PACKAGE}"
    fi
}

trap 'echo; die "Manually aborted!"' SIGINT SIGTERM
parse_parameters "${@}"
sync_build
install
package_tc
exit 0
