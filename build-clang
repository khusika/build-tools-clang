#!/usr/bin/env bash
# shellcheck disable=SC1117
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2019 Nathan Chancellor
#                         Albert I (krasCGQ)
#                         Khusika Dhamar Gusti (khusika)
#
# Clang compilation script


###############
#             #
#  VARIABLES  #
#             #
###############

# Colors
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"

# Set linux username
VENDOR=${USER}

# Set current working directory
DIR=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

# Folder that will house the source and build files
MAIN_FOLDER=${DIR}/clang-build

# Folder that will hold the main LLVM source
LLVM_FOLDER=${MAIN_FOLDER}/llvm

# Folder that will hold all of the build files and compiled code
BUILD_FOLDER=${MAIN_FOLDER}/build

# Folder that will hold compiled toolchains
TC_FOLDER=${DIR}/toolchains

# Start tracking time
START=$(date +"%s")

# Number of threads
THREADS=$(nproc --all)

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Help menu function
function help_menu() {
    echo
    echo "${BOLD}OVERVIEW:${RST} Build a Clang toolchain\n"
    echo "${BOLD}USAGE:${RST}    ./$(basename "${0}") <options>\n"
    echo "${BOLD}EXAMPLE:${RST}  ./$(basename "${0}") -a arm64\n"
    echo "${BOLD}REQUIRED PARAMETERS:${RST}"
    echo "  -a  | --arch:          Possible values: arm, arm64, powerpc, x86, ARM, and all. This is the toolchain's target architecture."
    echo "  -v  | --version:       Possible values: (7, 8, and 9). This is the Clang version to build."
    echo "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo "  -I  | --install-only:  Install only."
    echo "  -b  | --build-only:    Build only."
    echo "  -l  | --local-changes: Ability to keep local changes around."
    echo "  -S  | --stock:         Compile official Clang (Without Nathan's patch)."
    echo "  -u  | --update-only:   Ability to only update repos."
    echo "  -p  | --package:       Possible values: gz or xz. Compresses toolchain after build."
    echo "  -T  | --test:          Build a test toolchain.\n"
}

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Remove URLs from Clang version
function clang_version() {
    [[ ${#} -lt 1 || ! ${1} =~ "clang" ]] && { display_error "You didn't supply a Clang binary!"; return; }
    [[ ! -f ${1} ]] && { display_error "Clang binary supplied doesn't exist!"; return; }

    "${1}" --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//' || display_error "Something went wrong!"
}

# Formats the time
function format_time() {
    local TIME_STRING
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    display_error "${@}"
    exit
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Add a remote if it doesn't exist
function add_remote() {
    if ! git remote | grep -q -m 1 "${1}"; then
        git remote add "${1}" "${2}"
    fi
}

function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # REQUIRED FLAGS
            "-a"|"--arch") shift && TARGET=${1} ;;
            "-v"|"--version") shift && VERSION=${1} ;;

            # OPTIONAL FLAGS
            "-b"|"--build-only")
                BUILD_ONLY=true ;;
            "-d"|"--date")
                shift && enforce_value "${@}"
                DATE_OFFSET=${1} ;;
            "-I"|"--install-only")
                INSTALL_ONLY=true ;;
            "-i"|"--install-folder")
                shift && enforce_value "${@}"
                INSTALL_FOLDER=${1} ;;
            "-l"|"--local-changes")
                LOCAL_CHANGES=true ;;
            "-S"|"--stock")
                STOCK=true ;;
            "-T"|"--test")
                TEST=true ;;
            "-u"|"--update-only")
                UPDATE_ONLY=true ;;
            "-p"|"--package") shift && COMPRESSION=${1} ;;

            # HELP!
            "-h"|"--help") help_menu; exit ;;

            *) die "Invalid parameter specified!" -h ;;
        esac

        shift
    done

    # Default values
    case "${TARGET}" in
        "arm") ARCH="ARM" ;;
        "arm64") ARCH="AArch64" ;;
        "i686") ARCH="X86" ;;
        "powerpc") ARCH="PowerPC" ;;
        "ARM") ARCH="ARM;AArch64" ;;
        "all") ARCH="PowerPC;X86;ARM;AArch64" ;;
        *) die "Absent or invalid arch specified!" -h ;;
    esac

    # Default values
    case "${VERSION}" in
        7|8|9) ;;
        *) die "Absent or invalid Clang version!" -h ;;
    esac

    # Folder that will hold the final compiled toolchain
    [[ -z ${INSTALL_FOLDER} ]] && INSTALL_FOLDER=${TC_FOLDER}/${VENDOR}-clang-${VERSION}.x${TEST:+"-test"}

    # Set compiler
    CC=$(command -v clang || command -v gcc)
    CXX=$(command -v clang++ || command -v g++)
    [[ -z ${CC} || -z ${CXX} ]] && die "Neither GCC nor Clang could be found on your system!"
}


# Rolls back a repo based on a certain date
function rollback() {
    if [[ -n ${DATE_OFFSET} ]]; then
        git checkout "$(git log -1 --format=%H --before="$(date --date="-${DATE_OFFSET} day")")" || die "There was an error rolling back ${FOLDER}!"
        if [[ -z ${STOCK} && ${FOLDER} = "clang" ]]; then
            if [[ ${VERSION} -eq 7 ]]; then
                git cherry-pick 24c9731717 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick 513f3b3fb7 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick eab6ce7dc6 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick 69ad28caf8 || die "There was an error rolling back ${FOLDER}!"
            elif [[ ${VERSION} -eq 8 ]]; then
                git cherry-pick 24c9731717 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick c55e0cea84 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick f9428e60e6 || die "There was an error rolling back ${FOLDER}!"
            else
                git cherry-pick 24c9731717 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick cfcf0ee85e || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick 58316edd19 || die "There was an error rolling back ${FOLDER}!"
            fi
        fi
    fi
}


# Sync a git project
function git_sync() {(
    FOLDER=${1}

    # binutils uses another URL/branch scheme
    if [[ ${FOLDER} =~ "binutils" ]]; then
        URL=git://sourceware.org/git/binutils-gdb.git
        # SC2030: Modification of BRANCH is local (to subshell caused by (..) group).
        # shellcheck disable=SC2030
        BRANCH=binutils-2_31-branch
    else
        # Set URL based on folder
        case ${FOLDER} in
            "clang")
                URL=https://github.com/khusika/$(basename "${FOLDER}").git ;;
            "extra")
                URL=${LLVM_ORG}clang-tools-extra ;;
            *)
                URL=${LLVM_ORG}$(basename "${FOLDER}") ;;
        esac
    fi

    # If folder doesn't exist, we need to clone it
    if [[ ! -d ${FOLDER} ]]; then
        git clone "${URL}" -b "${BRANCH}" "${FOLDER}" || die "Error cloning ${FOLDER}!"
    fi

    cd "${FOLDER}" || die "Error moving into ${FOLDER}"

    git clean -fxdq

    # If checking out a branch fails, it's because 'origin/<branch>' and 'upstream/<branch>' exist
    git checkout ${BRANCH} || git checkout -b ${BRANCH} origin/${BRANCH}

    # For Clang, we need to add an upstream remote and rebase on it
    if [[ ${FOLDER} = "clang" ]]; then
        add_remote upstream "${LLVM_ORG}$(basename "${FOLDER}")"
        git fetch upstream
        if [[ -n ${STOCK} ]]; then
            git reset --hard upstream/"${BRANCH}"
        else
            [[ -z ${LOCAL_CHANGES} ]] && git reset --hard origin/"${BRANCH}"
            git rebase upstream/"${BRANCH}" || die "There was an error rebasing ${FOLDER}!"
        fi
    elif [[ ${FOLDER} =~ "binutils" ]]; then
        git fetch origin "${BRANCH}" || die "There was an error fetching updates for ${FOLDER}!"
        git rebase origin/"${BRANCH}" || die "There was an error updating ${FOLDER}!"
    else
        git fetch origin || die "There was an error fetching updates for ${FOLDER}!"
        if [[ -z ${LOCAL_CHANGES} ]]; then
            git reset --hard origin/"${BRANCH}" || die "There was an error updating ${FOLDER}!"
        else
            git rebase origin/"${BRANCH}" || die "There was an error updating ${FOLDER}!"
        fi
    fi

    # Roll back if necessary
    rollback
) || exit 1; }


# Gets the SVN revision of a particular project
function svn_revision() {
    PROJECT=${1}

    # SC2031: BRANCH was modified in a subshell. That change might be lost.
    # shellcheck disable=SC2031
    case ${VERSION} in
        "9") URL_SUFFIX=trunk ;;
        *) URL_SUFFIX=branches/"${BRANCH}" ;;
    esac

    case ${PROJECT} in
        "clang") URL_SUFFIX=cfe/${URL_SUFFIX} ;;
        "llvm") URL_SUFFIX=llvm/${URL_SUFFIX} ;;
    esac

    export "${PROJECT^^}"_SVN_REVISION="$(svn info "https://llvm.org/svn/llvm-project/${URL_SUFFIX}" --show-item revision)"
}


# Syncs all necessary projects
function sync_all() {
    header "Syncing projects"

    mkdir -p "${MAIN_FOLDER}"
    cd "${MAIN_FOLDER}" || die "Error creating ${MAIN_FOLDER}!"

    # Set branch based on version
    case ${VERSION} in
        "9") BRANCH=master ;;
        *) BRANCH="release_${VERSION}0" ;;
    esac

    # Define the git URL for global use
    LLVM_ORG=https://git.llvm.org/git/

    git_sync llvm
    svn_revision llvm

    mkdir -p "${LLVM_FOLDER}/tools"
    cd "${LLVM_FOLDER}/tools" || die "Error creating tools folder!"

    git_sync binutils
    git_sync clang
    svn_revision clang
    git_sync lld
    git_sync polly

    mkdir -p "${LLVM_FOLDER}/projects"
    cd "${LLVM_FOLDER}/projects" || die "Error creating projects folder!"

    git_sync compiler-rt
    git_sync libcxx
    git_sync libcxxabi
    git_sync libunwind
    git_sync openmp

    mkdir -p "${LLVM_FOLDER}/tools/clang/tools"
    cd "${LLVM_FOLDER}/tools/clang/tools" || die "Error creating tools folder!"

    git_sync extra

    [[ -n ${UPDATE_ONLY} ]] && exit
}


# Removes any previous build files
function cleanup() {
    find "${DIR}" -type f -name "*.tar.*" -exec rm -f {} \;
    rm -rf "${BUILD_FOLDER}"
    mkdir -p "${BUILD_FOLDER}"
    cd "${BUILD_FOLDER}" || die "Error creating build folder!"
}


# Build the toolchain
function build() {
    header "Building Clang"

    [[ -n ${STOCK} ]] && URL_PREFIX=${LLVM_ORG} || URL_PREFIX=https://github.com/khusika/

    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLINK_POLLY_INTO_TOOLS=ON \
          -DCMAKE_C_COMPILER="${CC}" \
          -DCMAKE_C_FLAGS="-O2 -march=native -mtune=native" \
          -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_CXX_FLAGS="-O2 -march=native -mtune=native" \
          -DLLVM_CCACHE_BUILD=ON \
          -DLLVM_ENABLE_PIC=ON \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER}" \
          -DLLVM_PARALLEL_COMPILE_JOBS="${THREADS}" \
          -DLLVM_PARALLEL_LINK_JOBS="${THREADS}" \
          -DLLVM_ENABLE_THREADS=ON \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_WERROR=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_BINUTILS_INCDIR="${LLVM_FOLDER}/tools/binutils/include" \
          -DLLVM_TARGETS_TO_BUILD="${ARCH}" \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DLLVM_USE_LINKER=gold \
          -DLLVM_VERSION_SUFFIX="-r${LLVM_SVN_REVISION:?}" \
          -DCLANG_REPOSITORY_STRING="${URL_PREFIX}clang" \
          -DCLANG_VENDOR="${VENDOR} " \
          -DCLANG_VERSION_SUFFIX="-r${CLANG_SVN_REVISION:?}" \
          "${LLVM_FOLDER}" || die "There was an error running cmake!"

    time ninja && SUCCESS=true
    TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
    if [[ -n ${SUCCESS} ]]; then
        VERSION_STRING=$(clang_version "${BUILD_FOLDER}"/bin/clang)
        header "SUCCESS!" "${GRN}"
        echo "${BOLD}Time elapsed:${RST} ${TIME_STRING,,}"
        echo
        echo "${BOLD}Version string:${RST} ${VERSION_STRING}"
        echo
    else
        header "ERROR BUILDING!"
        display_error "Time elapsed: ${TIME_STRING,,}"
        exit
    fi

    [[ -n ${BUILD_ONLY} ]] && exit
}

# Wrapper for syncing and building to minimize boilerplate if in
function sync_build() {
    if [[ -n ${INSTALL_ONLY} ]]; then
        cd "${BUILD_FOLDER}" || die "Build folder doesn't exist!"
        echo
        return
    fi
    sync_all
    cleanup
    build
}

# Install the toolchain
function install() {

    if [[ -z ${TEST} ]]; then
        rm -rf "${INSTALL_FOLDER}-old"
        mv "${INSTALL_FOLDER}" "${INSTALL_FOLDER}-old" 2>/dev/null
    fi
    if ! ninja install &>/dev/null; then
        header "ERROR INSTALLING!"
        exit
    fi

    echo "${BOLD}Installation location:${RST} ${INSTALL_FOLDER}"
    echo
}

# Package toolchain
function package_tc() {
    if [[ -n ${COMPRESSION} ]]; then
        TARGET_PACKAGE=${VENDOR}-clang-${VERSION}.0.${CLANG_SVN_REVISION}.tar.${COMPRESSION}
        PACKAGE=${VENDOR}-clang-${VERSION}.x${TEST:+"-test"}

        header "PACKAGING TOOLCHAIN"

        echo "Target file: ${TARGET_PACKAGE}"

        case "${COMPRESSION}" in
            "gz")
                echo "Packaging with GZIP..."
                GZ_OPT=-9 tar -c --use-compress-program=pigz --absolute-names -f "${TARGET_PACKAGE}" -C "${TC_FOLDER}" "${PACKAGE}" ;;
            "xz")
                echo "Packaging with XZ..."
                XZ_OPT=-9 tar -c --use-compress-program=pxz --absolute-names -f "${TARGET_PACKAGE}" -C "${TC_FOLDER}" "${PACKAGE}" ;;
            *)
                die "Invalid compression specified... skipping" ;;
        esac
        find "${DIR}" -print0 -type f -name "${TARGET_PACKAGE}" | xargs --null mv -t "${TC_FOLDER}"
        echo "${BOLD}Packaging location:${RST} ${INSTALL_FOLDER}/${TARGET_PACKAGE}"
    fi
}

trap 'echo; die "Manually aborted!"' SIGINT SIGTERM
parse_parameters "${@}"
sync_build
install
package_tc
exit 0
